# 3. Реализовать программу работы с органическими клетками. Необходимо создать класс Клетка. В его конструкторе
# инициализировать параметр, соответствующий количеству клеток (целое число). В классе должны быть реализованы методы
# перегрузки арифметических операторов: сложение (__add__()), вычитание (__sub__()), умножение (__mul__()),
# деление (__truediv__()).Данные методы должны применяться только к клеткам и выполнять увеличение, уменьшение,
# умножение и обычное (не целочисленное) деление клеток, соответственно. В методе деления должно осуществляться
# округление значения до целого числа.
# Сложение. Объединение двух клеток. При этом число ячеек общей клетки должно равняться сумме ячеек исходных двух
# клеток.
# Вычитание. Участвуют две клетки. Операцию необходимо выполнять только если разность количества ячеек двух клеток
# больше нуля, иначе выводить соответствующее сообщение.
# Умножение. Создается общая клетка из двух. Число ячеек общей клетки определяется
# как произведение количества ячеек этих двух клеток.
# Деление. Создается общая клетка из двух. Число ячеек общей клетки определяется как
# целочисленное деление количества ячеек этих двух клеток.
# В классе необходимо реализовать метод make_order(), принимающий экземпляр класса и количество ячеек в ряду.
# Данный метод позволяет организовать ячейки по рядам.
# Метод должен возвращать строку вида *****\n*****\n*****..., где количество ячеек между \n равно переданному аргументу.
# Если ячеек на формирование ряда не хватает, то в последний ряд записываются все оставшиеся.
# Например, количество ячеек клетки равняется 12, количество ячеек в ряду — 5.
# Тогда метод make_order() вернет строку: *****\n*****\n**.
# Или, количество ячеек клетки равняется 15, количество ячеек в ряду — 5. Тогда метод make_order()
# вернет строку: *****\n*****\n*****.
class CellSubtractionError(Exception):
    pass


class Cell:
    def __init__(self, cell_size):
        self.cell_size = cell_size

    def __add__(self, other):
        return Cell(self.cell_size + other.cell_size)

    def __sub__(self, other):
        try:
            if self.cell_size < other.cell_size:
                raise CellSubtractionError('Невозможно вычесть большую клетку из меньшей')
            return Cell(self.cell_size - other.cell_size)
        except CellSubtractionError as e:
            return e

    def __mul__(self, other):
        return Cell(self.cell_size * other.cell_size)

    def __truediv__(self, other):
        try:
            return Cell(self.cell_size // other.cell_size)
        except ZeroDivisionError as e:
            return e

    def make_order(self, cell_count):
        result = ''
        str_count = self.cell_size // cell_count
        for i in range(str_count + 1):
            result += '*' * cell_count + '\n'
        result += '*' * (self.cell_size % cell_count)
        return result


cell_6 = Cell(6)
cell_11 = Cell(11)
cell_27 = Cell(27)
cell_0 = Cell(0)

print('Сложение:', (cell_6 + cell_11).make_order(3), sep='\n')
print('Вычитание:', (cell_11 - cell_6).make_order(6), sep='\n')
print('Вычитание:', cell_6 - cell_11)
print('Произведение:', (cell_6 * cell_11).make_order(10), sep='\n')
print('Деление:', (cell_27 / cell_6).make_order(4), sep='\n')
print('Деление:', cell_6 / cell_0)
